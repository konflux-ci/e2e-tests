apiVersion: tekton.dev/v1beta1
kind: Task
metadata: 
  name: rotate-ic
  namespace: appstudio-qe
spec:
  steps:
    - env:
        - name: TOKEN
          valueFrom:
            secretKeyRef:
              key: token
              name: slack-token
      image: quay.io/devfile/base-developer-image:latest
      name: rotate-ic
      script: |
        #!/bin/bash

        # Updates IC group in slack and sends message about it.
        # First arument is index of primary IC in allPeople array
        # Second argument is index of secondary IC in allPeople array
        function updateICAndSendMessage {
            echo "Next Primary is:"
            echo "${allPeople[$1]}"
            echo "Next backup is:"
            echo "${allPeople[$2]}"
            primaryUsername=$(echo ${allPeople[$1]} |jq -r .username)
            primaryId=$(echo ${allPeople[$1]} |jq -r .id)
            backupUsername=$(echo ${allPeople[$2]} |jq -r .username)
            backupId=$(echo ${allPeople[$2]} |jq -r .id)
            curl -X POST -H "Authorization: Bearer $TOKEN" \
                --data-urlencode "usergroup=${USERGROUP_ID}" \
                --data-urlencode "users=${primaryId},${backupId}" \
                    "https://slack.com/api/usergroups.users.update"

            text=":interrupt-catcher: Primary IC for next week is ${primaryUsername}. Backup is ${backupUsername}"
            curl -X POST -H "Authorization: Bearer $TOKEN" \
                --data-urlencode "channel=C02FANRBZQD" \
                --data-urlencode "text=$text" \
                "https://slack.com/api/chat.postMessage"

        }

        USERGROUP_ID=S03PD4MV58W

        readarray -t allPeople < <(jq -c ".[]" /var/people-list/people-list)
        readarray -t currentICs < <(curl -X POST -H "Authorization: Bearer $TOKEN" https://slack.com/api/usergroups.users.list\?usergroup\=S03PD4MV58W | jq -r ".users[]")

        if [ ${#currentICs[@]} -ne 2 ]; then
            text=":warning: :interrupt-catcher: IC rotation pipeline failed (Expect exaclty 2 people in IC group). Please check latest run."
            curl -X POST -H "Authorization: Bearer $TOKEN" \
                --data-urlencode "channel=C02FANRBZQD" \
                --data-urlencode "text=$text" \
                "https://slack.com/api/chat.postMessage"
            exit 1
        fi

        for i in "${!allPeople[@]}"; do 
            for currentIC in "${currentICs[@]}"; do

                if [[ $currentIC == $(echo ${allPeople[$i]} | jq -r .id) ]]; then

                    # Exception for when the primary IC is first in list and the backup was last on the list (list wraps around)
                    if [[ $i -eq 0 ]]; then
                        if [[ " ${currentICs[*]} " =~ " $(echo ${allPeople[$((${#allPeople[@]}-1))]} | jq -r .id) " ]]; then
                            updateICAndSendMessage $(($i+1)) $i
                            exit 0
                        fi
                    fi

                    # Normal flow - check whether next one was in IC group as well and shift by one.
                    # Fail othewise
                    if [[ " ${currentICs[*]} " =~ " $(echo ${allPeople[$(($i+1))]} | jq -r .id) " ]]; then
                        if [[ -z ${allPeople[$(($i+2)) ]} ]]; then
                            updateICAndSendMessage 0 $(($i+1))
                        else 
                            updateICAndSendMessage $(($i+2)) $(($i+1))
                        fi
                        exit 0
                    else 
                        text=":warning: :interrupt-catcher: IC rotation pipeline failed (People in IC group are not next to each other according to roration list). Please check latest run."
                        curl -X POST -H "Authorization: Bearer $TOKEN" \
                            --data-urlencode "channel=C02FANRBZQD" \
                            --data-urlencode "text=$text" \
                            "https://slack.com/api/chat.postMessage"
                        exit 1
                    fi
                fi
            done
        done

      volumeMounts: 
        - name: people-list
          mountPath: /var/people-list
  volumes:
    - name: people-list
      configMap:
        name: ic-people-list
