//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	common "k8s.io/kube-openapi/pkg/common"
	spec "k8s.io/kube-openapi/pkg/validation/spec"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/codeready-toolchain/api/api/v1alpha1.AuthConfig":                            schema_codeready_toolchain_api_api_v1alpha1_AuthConfig(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.AutomaticApprovalConfig":               schema_codeready_toolchain_api_api_v1alpha1_AutomaticApprovalConfig(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.AutoscalerConfig":                      schema_codeready_toolchain_api_api_v1alpha1_AutoscalerConfig(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.BannedUser":                            schema_codeready_toolchain_api_api_v1alpha1_BannedUser(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.BannedUserSpec":                        schema_codeready_toolchain_api_api_v1alpha1_BannedUserSpec(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.CapacityThresholds":                    schema_codeready_toolchain_api_api_v1alpha1_CapacityThresholds(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.CaptchaConfig":                         schema_codeready_toolchain_api_api_v1alpha1_CaptchaConfig(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.CheConfig":                             schema_codeready_toolchain_api_api_v1alpha1_CheConfig(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.CheSecret":                             schema_codeready_toolchain_api_api_v1alpha1_CheSecret(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.CheStatus":                             schema_codeready_toolchain_api_api_v1alpha1_CheStatus(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.ConsoleConfig":                         schema_codeready_toolchain_api_api_v1alpha1_ConsoleConfig(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.DeactivationConfig":                    schema_codeready_toolchain_api_api_v1alpha1_DeactivationConfig(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.HostConfig":                            schema_codeready_toolchain_api_api_v1alpha1_HostConfig(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.HostOperatorStatus":                    schema_codeready_toolchain_api_api_v1alpha1_HostOperatorStatus(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.HostRegistrationServiceStatus":         schema_codeready_toolchain_api_api_v1alpha1_HostRegistrationServiceStatus(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.HostRoutes":                            schema_codeready_toolchain_api_api_v1alpha1_HostRoutes(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.Idler":                                 schema_codeready_toolchain_api_api_v1alpha1_Idler(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.IdlerSpec":                             schema_codeready_toolchain_api_api_v1alpha1_IdlerSpec(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.IdlerStatus":                           schema_codeready_toolchain_api_api_v1alpha1_IdlerStatus(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.LocalSecretReference":                  schema_codeready_toolchain_api_api_v1alpha1_LocalSecretReference(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.MasterUserRecord":                      schema_codeready_toolchain_api_api_v1alpha1_MasterUserRecord(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.MasterUserRecordSpec":                  schema_codeready_toolchain_api_api_v1alpha1_MasterUserRecordSpec(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.MasterUserRecordStatus":                schema_codeready_toolchain_api_api_v1alpha1_MasterUserRecordStatus(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.Member":                                schema_codeready_toolchain_api_api_v1alpha1_Member(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.MemberOperatorConfigSpec":              schema_codeready_toolchain_api_api_v1alpha1_MemberOperatorConfigSpec(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.MemberOperatorConfigStatus":            schema_codeready_toolchain_api_api_v1alpha1_MemberOperatorConfigStatus(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.MemberStatus":                          schema_codeready_toolchain_api_api_v1alpha1_MemberStatus(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.MemberStatusConfig":                    schema_codeready_toolchain_api_api_v1alpha1_MemberStatusConfig(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.MemberStatusSpec":                      schema_codeready_toolchain_api_api_v1alpha1_MemberStatusSpec(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.MemberStatusStatus":                    schema_codeready_toolchain_api_api_v1alpha1_MemberStatusStatus(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.Members":                               schema_codeready_toolchain_api_api_v1alpha1_Members(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.MetricsConfig":                         schema_codeready_toolchain_api_api_v1alpha1_MetricsConfig(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.NSTemplateSet":                         schema_codeready_toolchain_api_api_v1alpha1_NSTemplateSet(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.NSTemplateSetClusterResources":         schema_codeready_toolchain_api_api_v1alpha1_NSTemplateSetClusterResources(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.NSTemplateSetNamespace":                schema_codeready_toolchain_api_api_v1alpha1_NSTemplateSetNamespace(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.NSTemplateSetSpaceRole":                schema_codeready_toolchain_api_api_v1alpha1_NSTemplateSetSpaceRole(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.NSTemplateSetSpec":                     schema_codeready_toolchain_api_api_v1alpha1_NSTemplateSetSpec(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.NSTemplateSetStatus":                   schema_codeready_toolchain_api_api_v1alpha1_NSTemplateSetStatus(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.NSTemplateTier":                        schema_codeready_toolchain_api_api_v1alpha1_NSTemplateTier(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.NSTemplateTierSpec":                    schema_codeready_toolchain_api_api_v1alpha1_NSTemplateTierSpec(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.NSTemplateTierStatus":                  schema_codeready_toolchain_api_api_v1alpha1_NSTemplateTierStatus(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.Notification":                          schema_codeready_toolchain_api_api_v1alpha1_Notification(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.NotificationSecret":                    schema_codeready_toolchain_api_api_v1alpha1_NotificationSecret(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.NotificationSpec":                      schema_codeready_toolchain_api_api_v1alpha1_NotificationSpec(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.NotificationStatus":                    schema_codeready_toolchain_api_api_v1alpha1_NotificationStatus(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.NotificationsConfig":                   schema_codeready_toolchain_api_api_v1alpha1_NotificationsConfig(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.ProxyPlugin":                           schema_codeready_toolchain_api_api_v1alpha1_ProxyPlugin(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.ProxyPluginSpec":                       schema_codeready_toolchain_api_api_v1alpha1_ProxyPluginSpec(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.ProxyPluginStatus":                     schema_codeready_toolchain_api_api_v1alpha1_ProxyPluginStatus(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.RegistrationServiceAnalyticsConfig":    schema_codeready_toolchain_api_api_v1alpha1_RegistrationServiceAnalyticsConfig(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.RegistrationServiceAuthConfig":         schema_codeready_toolchain_api_api_v1alpha1_RegistrationServiceAuthConfig(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.RegistrationServiceConfig":             schema_codeready_toolchain_api_api_v1alpha1_RegistrationServiceConfig(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.RegistrationServiceDeploymentStatus":   schema_codeready_toolchain_api_api_v1alpha1_RegistrationServiceDeploymentStatus(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.RegistrationServiceHealth":             schema_codeready_toolchain_api_api_v1alpha1_RegistrationServiceHealth(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.RegistrationServiceResourcesStatus":    schema_codeready_toolchain_api_api_v1alpha1_RegistrationServiceResourcesStatus(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.RegistrationServiceVerificationConfig": schema_codeready_toolchain_api_api_v1alpha1_RegistrationServiceVerificationConfig(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.RegistrationServiceVerificationSecret": schema_codeready_toolchain_api_api_v1alpha1_RegistrationServiceVerificationSecret(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.ResourceCapacityThreshold":             schema_codeready_toolchain_api_api_v1alpha1_ResourceCapacityThreshold(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.ResourceUsage":                         schema_codeready_toolchain_api_api_v1alpha1_ResourceUsage(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.Routes":                                schema_codeready_toolchain_api_api_v1alpha1_Routes(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.SocialEvent":                           schema_codeready_toolchain_api_api_v1alpha1_SocialEvent(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.SocialEventSpec":                       schema_codeready_toolchain_api_api_v1alpha1_SocialEventSpec(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.SocialEventStatus":                     schema_codeready_toolchain_api_api_v1alpha1_SocialEventStatus(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.Space":                                 schema_codeready_toolchain_api_api_v1alpha1_Space(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.SpaceBinding":                          schema_codeready_toolchain_api_api_v1alpha1_SpaceBinding(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.SpaceBindingList":                      schema_codeready_toolchain_api_api_v1alpha1_SpaceBindingList(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.SpaceBindingSpec":                      schema_codeready_toolchain_api_api_v1alpha1_SpaceBindingSpec(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.SpaceBindingStatus":                    schema_codeready_toolchain_api_api_v1alpha1_SpaceBindingStatus(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.SpaceConfig":                           schema_codeready_toolchain_api_api_v1alpha1_SpaceConfig(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.SpaceRequest":                          schema_codeready_toolchain_api_api_v1alpha1_SpaceRequest(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.SpaceRequestSpec":                      schema_codeready_toolchain_api_api_v1alpha1_SpaceRequestSpec(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.SpaceRequestStatus":                    schema_codeready_toolchain_api_api_v1alpha1_SpaceRequestStatus(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.SpaceSpec":                             schema_codeready_toolchain_api_api_v1alpha1_SpaceSpec(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.SpaceStatus":                           schema_codeready_toolchain_api_api_v1alpha1_SpaceStatus(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.TierTemplateSpec":                      schema_codeready_toolchain_api_api_v1alpha1_TierTemplateSpec(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.TiersConfig":                           schema_codeready_toolchain_api_api_v1alpha1_TiersConfig(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.ToolchainCluster":                      schema_codeready_toolchain_api_api_v1alpha1_ToolchainCluster(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.ToolchainClusterCondition":             schema_codeready_toolchain_api_api_v1alpha1_ToolchainClusterCondition(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.ToolchainClusterConfig":                schema_codeready_toolchain_api_api_v1alpha1_ToolchainClusterConfig(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.ToolchainClusterSpec":                  schema_codeready_toolchain_api_api_v1alpha1_ToolchainClusterSpec(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.ToolchainClusterStatus":                schema_codeready_toolchain_api_api_v1alpha1_ToolchainClusterStatus(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.ToolchainConfigSpec":                   schema_codeready_toolchain_api_api_v1alpha1_ToolchainConfigSpec(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.ToolchainConfigStatus":                 schema_codeready_toolchain_api_api_v1alpha1_ToolchainConfigStatus(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.ToolchainSecret":                       schema_codeready_toolchain_api_api_v1alpha1_ToolchainSecret(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.ToolchainStatus":                       schema_codeready_toolchain_api_api_v1alpha1_ToolchainStatus(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.ToolchainStatusConfig":                 schema_codeready_toolchain_api_api_v1alpha1_ToolchainStatusConfig(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.ToolchainStatusSpec":                   schema_codeready_toolchain_api_api_v1alpha1_ToolchainStatusSpec(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.ToolchainStatusStatus":                 schema_codeready_toolchain_api_api_v1alpha1_ToolchainStatusStatus(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.UserAccount":                           schema_codeready_toolchain_api_api_v1alpha1_UserAccount(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.UserAccountSpec":                       schema_codeready_toolchain_api_api_v1alpha1_UserAccountSpec(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.UserAccountStatus":                     schema_codeready_toolchain_api_api_v1alpha1_UserAccountStatus(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.UserSignup":                            schema_codeready_toolchain_api_api_v1alpha1_UserSignup(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.UserSignupSpec":                        schema_codeready_toolchain_api_api_v1alpha1_UserSignupSpec(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.UserSignupStatus":                      schema_codeready_toolchain_api_api_v1alpha1_UserSignupStatus(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.UserTier":                              schema_codeready_toolchain_api_api_v1alpha1_UserTier(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.UserTierSpec":                          schema_codeready_toolchain_api_api_v1alpha1_UserTierSpec(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.UsersConfig":                           schema_codeready_toolchain_api_api_v1alpha1_UsersConfig(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.WebhookConfig":                         schema_codeready_toolchain_api_api_v1alpha1_WebhookConfig(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.Workspace":                             schema_codeready_toolchain_api_api_v1alpha1_Workspace(ref),
		"github.com/codeready-toolchain/api/api/v1alpha1.WorkspaceStatus":                       schema_codeready_toolchain_api_api_v1alpha1_WorkspaceStatus(ref),
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_AuthConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Defines all parameters concerned with the autoscaler",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"idp": {
						SchemaProps: spec.SchemaProps{
							Description: "Represents the configured identity provider",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_AutomaticApprovalConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Defines all parameters necessary for automatic approval",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines if the automatic approval is enabled or not",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_AutoscalerConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Defines all parameters concerned with the autoscaler",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"deploy": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines the flag that determines whether to deploy the autoscaler buffer",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"bufferMemory": {
						SchemaProps: spec.SchemaProps{
							Description: "Represents how much memory should be required by the autoscaler buffer",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"bufferReplicas": {
						SchemaProps: spec.SchemaProps{
							Description: "Represents the number of autoscaler buffer replicas to request",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_BannedUser(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BannedUser is used to maintain a list of banned e-mail addresses",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.BannedUserSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.BannedUserSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_BannedUserSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BannedUserSpec defines the desired state of BannedUser",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"email": {
						SchemaProps: spec.SchemaProps{
							Description: "The e-mail address of the account that has been banned",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"email"},
			},
		},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_CapacityThresholds(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CapacityThresholds allows to configure the capacity limits in the clusters",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"resourceCapacityThreshold": {
						SchemaProps: spec.SchemaProps{
							Description: "Contains capacity threshold configuration",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.ResourceCapacityThreshold"),
						},
					},
					"maxNumberOfSpacesPerMemberCluster": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-map-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Contains a map of maximal number of spaces that can be provisioned per member cluster mapped by the cluster name",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: 0,
										Type:    []string{"integer"},
										Format:  "int32",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.ResourceCapacityThreshold"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_CaptchaConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CaptchaConfig defines any configuration related to captcha verification",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enabled specifies whether the captcha verification feature is enabled or not",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"scoreThreshold": {
						SchemaProps: spec.SchemaProps{
							Description: "ScoreThreshold defines the captcha assessment score threshold. A score equal to or above the threshold means the user is most likely human and can proceed signing up but a score below the threshold means the score is suspicious and further verification may be required.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"siteKey": {
						SchemaProps: spec.SchemaProps{
							Description: "SiteKey defines the recaptcha site key to use when making recaptcha requests. There can be different ones for different environments. eg. dev, stage, prod",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"projectID": {
						SchemaProps: spec.SchemaProps{
							Description: "ProjectID defines the GCP project ID that has the recaptcha service enabled.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_CheConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Defines all parameters concerned with Che",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"keycloakRouteName": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines the Che/CRW Keycloak route name",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"routeName": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines the Che/CRW route name",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines the Che/CRW operator namespace",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"required": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines a flag that indicates whether the Che/CRW operator is required to be installed on the cluster. May be used in monitoring.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"userDeletionEnabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines a flag to turn the Che user deletion logic on/off",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"secret": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines all secrets related to Che configuration",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.CheSecret"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.CheSecret"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_CheSecret(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Defines all secrets related to Che configuration",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"ref": {
						SchemaProps: spec.SchemaProps{
							Description: "Reference is the name of the secret resource to look up",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"cheAdminUsernameKey": {
						SchemaProps: spec.SchemaProps{
							Description: "The key for the Che admin username in the secret values map",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"cheAdminPasswordKey": {
						SchemaProps: spec.SchemaProps{
							Description: "The key for the Che admin password in the secret values map",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_CheStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CheStatus contains information about the status of Che/CRW, such as installed and whether the member configuration is correct",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"type",
								},
								"x-kubernetes-list-type":       "map",
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Conditions is an array of current Che status conditions Supported condition types: ConditionReady",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.Condition"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_ConsoleConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Defines all parameters concerned with the console",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines the console route namespace",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"routeName": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines the console route name",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_DeactivationConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DeactivationConfig contains all configuration parameters related to deactivation",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"deactivatingNotificationDays": {
						SchemaProps: spec.SchemaProps{
							Description: "DeactivatingNotificationDays is the number of days after a pre-deactivating notification is sent that actual deactivation occurs.  If this parameter is set to zero, then there will be no delay",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"deactivationDomainsExcluded": {
						SchemaProps: spec.SchemaProps{
							Description: "DeactivationDomainsExcluded is a string of comma-separated domains that should be excluded from automatic user deactivation For example: \"@redhat.com,@ibm.com\"",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"userSignupDeactivatedRetentionDays": {
						SchemaProps: spec.SchemaProps{
							Description: "UserSignupDeactivatedRetentionDays is used to configure how many days we should keep deactivated UserSignup resources before deleting them.  This parameter value should reflect an extended period of time sufficient for gathering user metrics before removing the resources from the cluster.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"userSignupUnverifiedRetentionDays": {
						SchemaProps: spec.SchemaProps{
							Description: "UserSignupUnverifiedRetentionDays is used to configure how many days we should keep unverified (i.e. the user hasn't completed the user verification process via the registration service) UserSignup resources before deleting them.  It is intended for this parameter to define an aggressive cleanup schedule for unverified user signups, and the default configuration value for this parameter reflects this.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_HostConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "HostConfig contains all configuration parameters of the host operator",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"environment": {
						SchemaProps: spec.SchemaProps{
							Description: "Environment specifies the host-operator environment such as prod, stage, unit-tests, e2e-tests, dev, etc",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"automaticApproval": {
						SchemaProps: spec.SchemaProps{
							Description: "Keeps parameters necessary for automatic approval",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.AutomaticApprovalConfig"),
						},
					},
					"deactivation": {
						SchemaProps: spec.SchemaProps{
							Description: "Keeps parameters concerned with user deactivation",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.DeactivationConfig"),
						},
					},
					"metrics": {
						SchemaProps: spec.SchemaProps{
							Description: "Keeps parameters concerned with metrics",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.MetricsConfig"),
						},
					},
					"notifications": {
						SchemaProps: spec.SchemaProps{
							Description: "Keeps parameters concerned with notifications",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.NotificationsConfig"),
						},
					},
					"registrationService": {
						SchemaProps: spec.SchemaProps{
							Description: "Keeps parameters necessary for the registration service",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.RegistrationServiceConfig"),
						},
					},
					"tiers": {
						SchemaProps: spec.SchemaProps{
							Description: "Keeps parameters concerned with tiers",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.TiersConfig"),
						},
					},
					"toolchainStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "Keeps parameters concerned with the toolchainstatus",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.ToolchainStatusConfig"),
						},
					},
					"users": {
						SchemaProps: spec.SchemaProps{
							Description: "Keeps parameters concerned with user management",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.UsersConfig"),
						},
					},
					"capacityThresholds": {
						SchemaProps: spec.SchemaProps{
							Description: "Keeps parameters necessary for configuring capacity limits",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.CapacityThresholds"),
						},
					},
					"spaceConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "Keeps parameters necessary for configuring Space provisioning functionality",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.SpaceConfig"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.AutomaticApprovalConfig", "github.com/codeready-toolchain/api/api/v1alpha1.CapacityThresholds", "github.com/codeready-toolchain/api/api/v1alpha1.DeactivationConfig", "github.com/codeready-toolchain/api/api/v1alpha1.MetricsConfig", "github.com/codeready-toolchain/api/api/v1alpha1.NotificationsConfig", "github.com/codeready-toolchain/api/api/v1alpha1.RegistrationServiceConfig", "github.com/codeready-toolchain/api/api/v1alpha1.SpaceConfig", "github.com/codeready-toolchain/api/api/v1alpha1.TiersConfig", "github.com/codeready-toolchain/api/api/v1alpha1.ToolchainStatusConfig", "github.com/codeready-toolchain/api/api/v1alpha1.UsersConfig"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_HostOperatorStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "HostOperatorStatus defines the observed state of a toolchain's host operator",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "The version of the operator",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"revision": {
						SchemaProps: spec.SchemaProps{
							Description: "The commit id from the host-operator repository used to build the operator",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"buildTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "The timestamp of the host operator build",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"deploymentName": {
						SchemaProps: spec.SchemaProps{
							Description: "The status of the host operator's deployment",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"type",
								},
								"x-kubernetes-list-type":       "map",
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Conditions is an array of current host operator status conditions Supported condition types: ConditionReady",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.Condition"),
									},
								},
							},
						},
					},
				},
				Required: []string{"version", "revision", "buildTimestamp", "deploymentName"},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.Condition"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_HostRegistrationServiceStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "HostRegistrationServiceStatus defines the observed state of a toolchain's registration service",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"deployment": {
						SchemaProps: spec.SchemaProps{
							Description: "Deployment is the status of the registration service's deployment",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.RegistrationServiceDeploymentStatus"),
						},
					},
					"registrationServiceResources": {
						SchemaProps: spec.SchemaProps{
							Description: "RegistrationServiceResources is the status for resources created for the registration service",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.RegistrationServiceResourcesStatus"),
						},
					},
					"health": {
						SchemaProps: spec.SchemaProps{
							Description: "Health provides health status of the registration service",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.RegistrationServiceHealth"),
						},
					},
				},
				Required: []string{"deployment", "registrationServiceResources", "health"},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.RegistrationServiceDeploymentStatus", "github.com/codeready-toolchain/api/api/v1alpha1.RegistrationServiceHealth", "github.com/codeready-toolchain/api/api/v1alpha1.RegistrationServiceResourcesStatus"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_HostRoutes(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "HostRoutes contains information about the public routes available to the user in the host cluster",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"proxyURL": {
						SchemaProps: spec.SchemaProps{
							Description: "ProxyURL is the Proxy URL of the cluster",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"type",
								},
								"x-kubernetes-list-type":       "map",
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Conditions is an array of current member operator status conditions Supported condition types: ConditionReady",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.Condition"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_Idler(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Idler enables automatic idling of payloads in a user namespaces where the name of the Idler matches the name of the corresponding namespace. For example an Idler with \"foo\" name will be managing pods in namespace \"foo\".",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.IdlerSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.IdlerStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.IdlerSpec", "github.com/codeready-toolchain/api/api/v1alpha1.IdlerStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_IdlerSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "IdlerSpec defines the desired state of Idler",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"timeoutSeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "TimeoutSeconds is the number of seconds before the running pods will be deleted",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
				Required: []string{"timeoutSeconds"},
			},
		},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_IdlerStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "IdlerStatus defines the observed state of Idler",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"pods": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"name",
								},
								"x-kubernetes-list-type":       "map",
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Pods is an array of tracked pods",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.Pod"),
									},
								},
							},
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"type",
								},
								"x-kubernetes-list-type":       "map",
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Conditions is an array of current Idler conditions Supported condition types: ConditionReady",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.Condition", "github.com/codeready-toolchain/api/api/v1alpha1.Pod"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_LocalSecretReference(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "LocalSecretReference is a reference to a secret within the enclosing namespace.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of a secret within the enclosing namespace",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name"},
			},
		},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_MasterUserRecord(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MasterUserRecord keeps all information about user, user accounts and namespaces provisioned in CodeReady Toolchain",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.MasterUserRecordSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.MasterUserRecordStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.MasterUserRecordSpec", "github.com/codeready-toolchain/api/api/v1alpha1.MasterUserRecordStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_MasterUserRecordSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MasterUserRecordSpec defines the desired state of MasterUserRecord",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"userID": {
						SchemaProps: spec.SchemaProps{
							Description: "UserID is the user ID from RHD Identity Provider token (“sub” claim)",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"disabled": {
						SchemaProps: spec.SchemaProps{
							Description: "If set to true then the corresponding user should not be able to login (but the underlying UserAccounts still exists) \"false\" is assumed by default",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"userAccounts": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"targetCluster",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "The list of user accounts in the member clusters which belong to this MasterUserRecord",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.UserAccountEmbedded"),
									},
								},
							},
						},
					},
					"originalSub": {
						SchemaProps: spec.SchemaProps{
							Description: "OriginalSub is an optional property temporarily introduced for the purpose of migrating the users to a new IdP provider client, and contains the user's \"original-sub\" claim",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"tierName": {
						SchemaProps: spec.SchemaProps{
							Description: "TierName is an optional property introduced to retain the name of the tier for which the Dev Sandbox user is provisioned, so we can still deal with deactivation once the NSTemplateSet field has been removed from `[]spec.UserAccounts` temporarily marked as optional until the migration took place (CRT-1321)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"userID"},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.UserAccountEmbedded"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_MasterUserRecordStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MasterUserRecordStatus defines the observed state of MasterUserRecord",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"type",
								},
								"x-kubernetes-list-type":       "map",
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Conditions is an array of current Master User Record conditions Supported condition types: Provisioning, UserAccountNotReady and Ready",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.Condition"),
									},
								},
							},
						},
					},
					"userAccounts": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "The status of user accounts in the member clusters which belong to this MasterUserRecord",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.UserAccountStatusEmbedded"),
									},
								},
							},
						},
					},
					"provisionedTime": {
						SchemaProps: spec.SchemaProps{
							Description: "The timestamp when the user was provisioned",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.Condition", "github.com/codeready-toolchain/api/api/v1alpha1.UserAccountStatusEmbedded", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_Member(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Member contains the status of a member cluster",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"apiEndpoint": {
						SchemaProps: spec.SchemaProps{
							Description: "APIEndpoint is the server API URL of the cluster",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"clusterName": {
						SchemaProps: spec.SchemaProps{
							Description: "The cluster identifier",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"spaceCount": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of Spaces created within the member cluster",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"memberStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "The array of member status objects",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.MemberStatusStatus"),
						},
					},
				},
				Required: []string{"clusterName", "memberStatus"},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.MemberStatusStatus"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_MemberOperatorConfigSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MemberOperatorConfigSpec contains all configuration parameters of the member operator",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"auth": {
						SchemaProps: spec.SchemaProps{
							Description: "Keeps parameters concerned with authentication",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.AuthConfig"),
						},
					},
					"autoscaler": {
						SchemaProps: spec.SchemaProps{
							Description: "Keeps parameters concerned with the autoscaler",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.AutoscalerConfig"),
						},
					},
					"che": {
						SchemaProps: spec.SchemaProps{
							Description: "Keeps parameters concerned with Che/CRW",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.CheConfig"),
						},
					},
					"console": {
						SchemaProps: spec.SchemaProps{
							Description: "Keeps parameters concerned with the console",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.ConsoleConfig"),
						},
					},
					"skipUserCreation": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines the flag that determines whether User and Identity resources should be created for a UserAccount",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"memberStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "Keeps parameters concerned with member status",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.MemberStatusConfig"),
						},
					},
					"toolchainCluster": {
						SchemaProps: spec.SchemaProps{
							Description: "Keeps parameters concerned with the toolchaincluster",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.ToolchainClusterConfig"),
						},
					},
					"webhook": {
						SchemaProps: spec.SchemaProps{
							Description: "Keeps parameters concerned with the webhook",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.WebhookConfig"),
						},
					},
					"webConsolePlugin": {
						SchemaProps: spec.SchemaProps{
							Description: "WebConsolePlugin is used to configure the Web Console Plugin parameters",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.WebConsolePlugin"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.AuthConfig", "github.com/codeready-toolchain/api/api/v1alpha1.AutoscalerConfig", "github.com/codeready-toolchain/api/api/v1alpha1.CheConfig", "github.com/codeready-toolchain/api/api/v1alpha1.ConsoleConfig", "github.com/codeready-toolchain/api/api/v1alpha1.MemberStatusConfig", "github.com/codeready-toolchain/api/api/v1alpha1.ToolchainClusterConfig", "github.com/codeready-toolchain/api/api/v1alpha1.WebConsolePlugin", "github.com/codeready-toolchain/api/api/v1alpha1.WebhookConfig"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_MemberOperatorConfigStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MemberOperatorConfigStatus defines the observed state of MemberOperatorConfig",
				Type:        []string{"object"},
			},
		},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_MemberStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MemberStatus is used to track toolchain member status",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.MemberStatusSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.MemberStatusStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.MemberStatusSpec", "github.com/codeready-toolchain/api/api/v1alpha1.MemberStatusStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_MemberStatusConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Defines all parameters concerned with member status",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"refreshPeriod": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines the period between refreshes of the member status",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_MemberStatusSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MemberStatusSpec defines the desired state of MemberStatus",
				Type:        []string{"object"},
			},
		},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_MemberStatusStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MemberStatusStatus defines the observed state of the toolchain member status",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"che": {
						SchemaProps: spec.SchemaProps{
							Description: "Che is the status of Che/CRW, such as installed and whether the member configuration is correct",
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.CheStatus"),
						},
					},
					"memberOperator": {
						SchemaProps: spec.SchemaProps{
							Description: "MemberOperator is the status of a toolchain member operator",
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.MemberOperatorStatus"),
						},
					},
					"hostConnection": {
						SchemaProps: spec.SchemaProps{
							Description: "HostConnection is the status of the connection with the host cluster",
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.ToolchainClusterStatus"),
						},
					},
					"host": {
						SchemaProps: spec.SchemaProps{
							Description: "Host is the status of the connection with the host cluster",
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.HostStatus"),
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"type",
								},
								"x-kubernetes-list-type":       "map",
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Conditions is an array of current toolchain status conditions Supported condition types: ConditionReady",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.Condition"),
									},
								},
							},
						},
					},
					"resourceUsage": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource usage of the cluster",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.ResourceUsage"),
						},
					},
					"routes": {
						SchemaProps: spec.SchemaProps{
							Description: "Routes/URLs of the cluster, such as Console and Che Dashboard URLs",
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.Routes"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.CheStatus", "github.com/codeready-toolchain/api/api/v1alpha1.Condition", "github.com/codeready-toolchain/api/api/v1alpha1.HostStatus", "github.com/codeready-toolchain/api/api/v1alpha1.MemberOperatorStatus", "github.com/codeready-toolchain/api/api/v1alpha1.ResourceUsage", "github.com/codeready-toolchain/api/api/v1alpha1.Routes", "github.com/codeready-toolchain/api/api/v1alpha1.ToolchainClusterStatus"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_Members(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Members contains all configuration for member operators",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"default": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines default configuration to be applied to all member clusters",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.MemberOperatorConfigSpec"),
						},
					},
					"specificPerMemberCluster": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-map-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "A map of cluster-specific member operator configurations indexed by member toolchaincluster name",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.MemberOperatorConfigSpec"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.MemberOperatorConfigSpec"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_MetricsConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MetricsConfig contains all configuration parameters related to metrics gathering",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"forceSynchronization": {
						SchemaProps: spec.SchemaProps{
							Description: "ForceSynchronization is a flag used to trigger synchronization of the metrics based on the resources rather than on the content of `ToolchainStatus.status.metrics`",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_NSTemplateSet(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NSTemplateSet defines user environment via templates that are used for namespace provisioning",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.NSTemplateSetSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.NSTemplateSetStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.NSTemplateSetSpec", "github.com/codeready-toolchain/api/api/v1alpha1.NSTemplateSetStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_NSTemplateSetClusterResources(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NSTemplateSetClusterResources defines the cluster-scoped resources associated with a given user",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"templateRef": {
						SchemaProps: spec.SchemaProps{
							Description: "TemplateRef The name of the TierTemplate resource which exists in the host cluster and which contains the template to use",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"templateRef"},
			},
		},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_NSTemplateSetNamespace(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NSTemplateSetNamespace the namespace definition in an NSTemplateSet resource",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"templateRef": {
						SchemaProps: spec.SchemaProps{
							Description: "TemplateRef The name of the TierTemplate resource which exists in the host cluster and which contains the template to use",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"templateRef"},
			},
		},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_NSTemplateSetSpaceRole(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NSTemplateSetSpaceRole the role template and the users to whom the templates should be applied to",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"templateRef": {
						SchemaProps: spec.SchemaProps{
							Description: "TemplateRef The name of the TierTemplate resource which exists in the host cluster and which contains the template to use",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"usernames": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Usernames the usernames to which the template applies",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
				Required: []string{"templateRef", "usernames"},
			},
		},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_NSTemplateSetSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NSTemplateSetSpec defines the desired state of NSTemplateSet",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"tierName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the tier represented by this template set",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namespaces": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "The namespace templates",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.NSTemplateSetNamespace"),
									},
								},
							},
						},
					},
					"clusterResources": {
						SchemaProps: spec.SchemaProps{
							Description: "the cluster resources template (for cluster-wide quotas, etc.)",
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.NSTemplateSetClusterResources"),
						},
					},
					"spaceRoles": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "the role template and the users to whom the templates should be applied to",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.NSTemplateSetSpaceRole"),
									},
								},
							},
						},
					},
				},
				Required: []string{"tierName", "namespaces"},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.NSTemplateSetClusterResources", "github.com/codeready-toolchain/api/api/v1alpha1.NSTemplateSetNamespace", "github.com/codeready-toolchain/api/api/v1alpha1.NSTemplateSetSpaceRole"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_NSTemplateSetStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NSTemplateSetStatus defines the observed state of NSTemplateSet",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"provisionedNamespaces": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "ProvisionedNamespaces is a list of Namespaces that were provisioned by the NSTemplateSet.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.SpaceNamespace"),
									},
								},
							},
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"type",
								},
								"x-kubernetes-list-type":       "map",
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Conditions is an array of current NSTemplateSet conditions Supported condition types: ConditionReady",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.Condition", "github.com/codeready-toolchain/api/api/v1alpha1.SpaceNamespace"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_NSTemplateTier(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NSTemplateTier configures user environment via templates used for namespaces the user has access to",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.NSTemplateTierSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.NSTemplateTierStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.NSTemplateTierSpec", "github.com/codeready-toolchain/api/api/v1alpha1.NSTemplateTierStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_NSTemplateTierSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NSTemplateTierSpec defines the desired state of NSTemplateTier",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"namespaces": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "The namespace templates",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.NSTemplateTierNamespace"),
									},
								},
							},
						},
					},
					"clusterResources": {
						SchemaProps: spec.SchemaProps{
							Description: "the cluster resources template (for cluster-wide quotas, etc.)",
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.NSTemplateTierClusterResources"),
						},
					},
					"spaceRoles": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-map-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "the templates to set the spaces roles, indexed by role",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.NSTemplateTierSpaceRole"),
									},
								},
							},
						},
					},
				},
				Required: []string{"namespaces"},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.NSTemplateTierClusterResources", "github.com/codeready-toolchain/api/api/v1alpha1.NSTemplateTierNamespace", "github.com/codeready-toolchain/api/api/v1alpha1.NSTemplateTierSpaceRole"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_NSTemplateTierStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NSTemplateTierStatus defines the observed state of NSTemplateTier",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"type",
								},
								"x-kubernetes-list-type":       "map",
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Conditions is an array of current NSTemplateTier conditions Supported condition types: ConditionReady",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.Condition"),
									},
								},
							},
						},
					},
					"updates": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"startTime",
								},
								"x-kubernetes-list-type":       "map",
								"x-kubernetes-patch-merge-key": "startTime",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Updates is an array of all NSTemplateTier updates",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.NSTemplateTierHistory"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.Condition", "github.com/codeready-toolchain/api/api/v1alpha1.NSTemplateTierHistory"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_Notification(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Notification registers a notification in the CodeReady Toolchain",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.NotificationSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.NotificationStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.NotificationSpec", "github.com/codeready-toolchain/api/api/v1alpha1.NotificationStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_NotificationSecret(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Defines all secrets related to notification configuration",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"ref": {
						SchemaProps: spec.SchemaProps{
							Description: "Reference is the name of the secret resource to look up",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"mailgunDomain": {
						SchemaProps: spec.SchemaProps{
							Description: "The key for the host operator mailgun domain used for creating an instance of mailgun",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"mailgunAPIKey": {
						SchemaProps: spec.SchemaProps{
							Description: "The key for the host operator mailgun api key used for creating an instance of mailgun",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"mailgunSenderEmail": {
						SchemaProps: spec.SchemaProps{
							Description: "The key for the host operator mailgun senders email",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"mailgunReplyToEmail": {
						SchemaProps: spec.SchemaProps{
							Description: "The key for the reply-to email address that will be set in sent notifications",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_NotificationSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NotificationSpec defines the desired state of Notification",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"userID": {
						SchemaProps: spec.SchemaProps{
							Description: "UserID is the user ID from RHD Identity Provider token (“sub” claim).  The UserID is used by the notification service (i.e. the NotificationController) to lookup the UserSignup resource for the user, and extract from it the values required to generate the notification content and to deliver the notification Deprecated: replaced by Context",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"recipient": {
						SchemaProps: spec.SchemaProps{
							Description: "Recipient is used to specify the email address where the notification will be delivered.  It must comply with section 3.4.1 of RFC2822, and should be formatted to include the user's first and last names, e.g. \"John Smith <jsmith@example.com>\"",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"context": {
						SchemaProps: spec.SchemaProps{
							Description: "Context is used to set a number of arbitrary values to be passed to the notification content text formatter, for inclusion in the body of the notification.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"template": {
						SchemaProps: spec.SchemaProps{
							Description: "Template is the name of the NotificationTemplate resource that will be used to generate the notification",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"subject": {
						SchemaProps: spec.SchemaProps{
							Description: "Subject is used when no template value is specified, in cases where the complete notification subject is specified at notification creation time",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"content": {
						SchemaProps: spec.SchemaProps{
							Description: "Content is used when no template value is specified, in cases where the complete notification content is specified at notification creation time",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_NotificationStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NotificationStatus defines the observed state of Notification",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"type",
								},
								"x-kubernetes-list-type":       "map",
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Conditions is an array of current Notification conditions Supported condition types: Sent",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.Condition"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_NotificationsConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NotificationsConfig contains all configuration parameters related to notifications",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"notificationDeliveryService": {
						SchemaProps: spec.SchemaProps{
							Description: "NotificationDeliveryService is notification delivery service to use for notifications",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"durationBeforeNotificationDeletion": {
						SchemaProps: spec.SchemaProps{
							Description: "DurationBeforeNotificationDeletion is notification delivery service to use for notifications",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"adminEmail": {
						SchemaProps: spec.SchemaProps{
							Description: "The administrator email address for system notifications",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"templateSetName": {
						SchemaProps: spec.SchemaProps{
							Description: "TemplateSetName defines the set of notification templates. Different Sandbox instances can use different notification templates. For example Dev Sandbox and AppStudio instances use different templates. By default, the \"sandbox\" template set name is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"secret": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines all secrets related to notification configuration",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.NotificationSecret"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.NotificationSecret"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_ProxyPlugin(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ProxyPlugin represents the configuration to handle GET's to k8s services in member clusters that first route through the registration service running in the sandbox host cluster.  Two forms of URL are supported: https://<proxy-host>/plugins/<ProxyPlugin.ObjectMeta.Name>/v1alpha2/<namespace-name>/ https://<proxy-host>/plugins/<ProxyPlugin.ObjectMeta.Name>/workspaces/<workspace-name>/v1alpha2/<namespace-name>",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.ProxyPluginSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.ProxyPluginStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.ProxyPluginSpec", "github.com/codeready-toolchain/api/api/v1alpha1.ProxyPluginStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_ProxyPluginSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ProxyPluginSpec defines the desired state of ProxyPlugin",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"openShiftRouteTargetEndpoint": {
						SchemaProps: spec.SchemaProps{
							Description: "OpenShiftRouteTargetEndpoint is an optional field that represents the look up information for an OpenShift Route as the endpoint for the registration service to proxy requests to that have the https://<proxy-host>/plugins/<ProxyPlugin.ObjectMeta.Name> in its incoming URL.  As we add more types besides OpenShift Routes, we will add more optional fields to this spec object",
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.OpenShiftRouteTarget"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.OpenShiftRouteTarget"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_ProxyPluginStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ProxyPluginStatus defines the observed state of ProxyPlugin",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"type",
								},
								"x-kubernetes-list-type":       "map",
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Conditions is an array of current Proxy Plugin conditions Supported condition types: ConditionReady",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.Condition"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_RegistrationServiceAnalyticsConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RegistrationServiceAnalyticsConfig contains the subset of registration service configuration parameters related to analytics",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"woopraDomain": {
						SchemaProps: spec.SchemaProps{
							Description: "WoopraDomain specifies the woopra domain name",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"segmentWriteKey": {
						SchemaProps: spec.SchemaProps{
							Description: "SegmentWriteKey specifies the segment write key",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_RegistrationServiceAuthConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RegistrationServiceAuthConfig contains the subset of registration service configuration parameters related to authentication",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"authClientLibraryURL": {
						SchemaProps: spec.SchemaProps{
							Description: "AuthClientLibraryURL specifies the auth library location",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"authClientConfigContentType": {
						SchemaProps: spec.SchemaProps{
							Description: "AuthClientConfigContentType specifies the auth config config content type",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"authClientConfigRaw": {
						SchemaProps: spec.SchemaProps{
							Description: "AuthClientConfigRaw specifies the URL used to a access the registration service",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"authClientPublicKeysURL": {
						SchemaProps: spec.SchemaProps{
							Description: "AuthClientPublicKeysURL specifies the public keys URL",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_RegistrationServiceConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RegistrationServiceConfig contains all configuration parameters related to the registration service",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"analytics": {
						SchemaProps: spec.SchemaProps{
							Description: "Keeps parameters necessary for the registration service analytics config",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.RegistrationServiceAnalyticsConfig"),
						},
					},
					"auth": {
						SchemaProps: spec.SchemaProps{
							Description: "Keeps parameters necessary for the registration service authentication config",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.RegistrationServiceAuthConfig"),
						},
					},
					"environment": {
						SchemaProps: spec.SchemaProps{
							Description: "Environment specifies the environment such as prod, stage, unit-tests, e2e-tests, dev, etc",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"logLevel": {
						SchemaProps: spec.SchemaProps{
							Description: "LogLevel specifies the logging level",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace specifies the namespace in which the registration service and host operator is running Consumed by host operator and set as env var on registration-service deployment",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"registrationServiceURL": {
						SchemaProps: spec.SchemaProps{
							Description: "RegistrationServiceURL is the URL used to a ccess the registration service",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "Replicas specifies the number of replicas to use for the registration service deployment",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"verification": {
						SchemaProps: spec.SchemaProps{
							Description: "Keeps parameters necessary for the registration service verification config",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.RegistrationServiceVerificationConfig"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.RegistrationServiceAnalyticsConfig", "github.com/codeready-toolchain/api/api/v1alpha1.RegistrationServiceAuthConfig", "github.com/codeready-toolchain/api/api/v1alpha1.RegistrationServiceVerificationConfig"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_RegistrationServiceDeploymentStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RegistrationServiceDeploymentStatus contains status of the registration service's deployment",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The host operator deployment name",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"type",
								},
								"x-kubernetes-list-type":       "map",
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Conditions is an array of current deployment status conditions for a host operator Supported condition types: Available, Progressing",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.Condition"),
									},
								},
							},
						},
					},
				},
				Required: []string{"name"},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.Condition"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_RegistrationServiceHealth(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RegistrationServiceHealth contains health status of the registration service",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"alive": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"buildTime": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"environment": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"revision": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"startTime": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"type",
								},
								"x-kubernetes-list-type":       "map",
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Conditions is an array of status conditions for the health of the registration service Supported condition types: ConditionReady",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.Condition"),
									},
								},
							},
						},
					},
				},
				Required: []string{"alive", "buildTime", "environment", "revision", "startTime"},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.Condition"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_RegistrationServiceResourcesStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RegistrationServiceResourcesStatus contains conditions for creation/deployment of registration service resources",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"type",
								},
								"x-kubernetes-list-type":       "map",
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Conditions is an array of current registration service resource status conditions Supported condition types: Deployed, Deploying, DeployingFailed",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.Condition"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_RegistrationServiceVerificationConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RegistrationServiceVerificationConfig contains the subset of registration service configuration parameters related to verification",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"secret": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines all secrets related to the registration service verification configuration",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.RegistrationServiceVerificationSecret"),
						},
					},
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "VerificationEnabled specifies whether verification is enabled or not Verification enablement works in the following way:\n  1. verification.enabled == false\n     No verification during the signup process at all. (no phone, no captcha)\n  2. verification.enabled == true && verification.captcha.enabled == true\n     Captcha is enabled and will bypass phone verification if the score is above the threshold but if the score is\n     below the threshold then phone verification kicks in.\n  3. verification.enabled == true && verification.captcha.enabled == false\n     Only phone verification is effect.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"captcha": {
						SchemaProps: spec.SchemaProps{
							Description: "Captcha defines any configuration related to captcha verification",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.CaptchaConfig"),
						},
					},
					"dailyLimit": {
						SchemaProps: spec.SchemaProps{
							Description: "VerificationDailyLimit specifies the number of times a user may initiate a phone verification request within a 24 hour period",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"attemptsAllowed": {
						SchemaProps: spec.SchemaProps{
							Description: "VerificationAttemptsAllowed specifies the number of times a user may attempt to correctly enter a verification code, if they fail then they must request another code",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"messageTemplate": {
						SchemaProps: spec.SchemaProps{
							Description: "VerificationMessageTemplate specifies the message template used to generate the content sent to users via SMS for phone verification",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"excludedEmailDomains": {
						SchemaProps: spec.SchemaProps{
							Description: "VerificationExcludedEmailDomains specifies the list of email address domains for which phone verification is not required",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"codeExpiresInMin": {
						SchemaProps: spec.SchemaProps{
							Description: "VerificationCodeExpiresInMin specifies an int representing the number of minutes before a verification code should be expired",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"notificationSender": {
						SchemaProps: spec.SchemaProps{
							Description: "NotificationSender is used to specify which service should be used to send verification notifications. Allowed values are \"twilio\", \"aws\".  If not specified, the Twilio sender will be used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"awsRegion": {
						SchemaProps: spec.SchemaProps{
							Description: "AWSRegion to use when sending notification SMS",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"awsSenderId": {
						SchemaProps: spec.SchemaProps{
							Description: "AWSSenderID the Alphanumeric Sender ID to use, e.g. \"DevSandbox\"",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"awsSMSType": {
						SchemaProps: spec.SchemaProps{
							Description: "AWSSMSType is the type of SMS message to send, either `Promotional` or `Transactional` See https://docs.aws.amazon.com/sns/latest/dg/sms_publish-to-phone.html for details",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.CaptchaConfig", "github.com/codeready-toolchain/api/api/v1alpha1.RegistrationServiceVerificationSecret"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_RegistrationServiceVerificationSecret(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Defines all secrets related to registration service verification configuration",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"ref": {
						SchemaProps: spec.SchemaProps{
							Description: "Reference is the name of the secret resource to look up",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"twilioAccountSID": {
						SchemaProps: spec.SchemaProps{
							Description: "TwilioAccountSID specifies the Twilio account identifier, used for sending phone verification messages",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"twilioAuthToken": {
						SchemaProps: spec.SchemaProps{
							Description: "TwilioAuthToken specifies the Twilio authentication token, used for sending phone verification messages",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"twilioFromNumber": {
						SchemaProps: spec.SchemaProps{
							Description: "TwilioFromNumber specifies the phone number or alphanumeric \"Sender ID\" for sending phone verification messages",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"awsAccessKeyID": {
						SchemaProps: spec.SchemaProps{
							Description: "AWSAccessKeyId is the AWS Access Key used to authenticate in order to access AWS services",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"awsSecretAccessKey": {
						SchemaProps: spec.SchemaProps{
							Description: "AWSSecretAccessKey is the AWS credential used to authenticate in order to access AWS services",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"recaptchaServiceAccountFile": {
						SchemaProps: spec.SchemaProps{
							Description: "RecaptchaServiceAccountFile is the GCP service account file contents encoded in base64, it is to be used with the recaptcha client for authentication",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_ResourceCapacityThreshold(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Contains default capacity threshold as well as specific ones for particular member clusters",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"defaultThreshold": {
						SchemaProps: spec.SchemaProps{
							Description: "It is the default capacity threshold (in percentage of usage) to be used for all member clusters if no special threshold is defined",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"specificPerMemberCluster": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-map-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Contains a map of specific capacity thresholds (in percentage of usage) for particular member clusters mapped by their names",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: 0,
										Type:    []string{"integer"},
										Format:  "int32",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_ResourceUsage(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Contains information about the resource usage of the cluster",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"memoryUsagePerNodeRole": {
						SchemaProps: spec.SchemaProps{
							Description: "How many percent of the available memory is used per node role (eg. worker, master)",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: 0,
										Type:    []string{"integer"},
										Format:  "int32",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_Routes(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Routes contains information about the public routes available to the user in the cluster",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"consoleURL": {
						SchemaProps: spec.SchemaProps{
							Description: "ConsoleURL is the web console URL of the cluster",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"cheDashboardURL": {
						SchemaProps: spec.SchemaProps{
							Description: "CheDashboardURL is the Che Dashboard URL of the cluster if Che is installed",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"type",
								},
								"x-kubernetes-list-type":       "map",
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Conditions is an array of current member operator status conditions Supported condition types: ConditionReady",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.Condition"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_SocialEvent(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SocialEvent registers a social event in Dev Sandbox",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.SocialEventSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.SocialEventStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.SocialEventSpec", "github.com/codeready-toolchain/api/api/v1alpha1.SocialEventStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_SocialEventSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SocialEventSpec defines the parameters for a Social event, such as a training session or workshop. Users may register for the event by using the event's unique activation code",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"startTime": {
						SchemaProps: spec.SchemaProps{
							Description: "The timestamp from which users may register via this event's activation code",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"endTime": {
						SchemaProps: spec.SchemaProps{
							Description: "The timestamp after which users may no longer register via this event's activation code",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "An optional description that may be provided describing the purpose of the event",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"maxAttendees": {
						SchemaProps: spec.SchemaProps{
							Description: "The maximum number of attendees",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"userTier": {
						SchemaProps: spec.SchemaProps{
							Description: "The tier to assign to users registering for the event. This must be the valid name of an nstemplatetier resource.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"spaceTier": {
						SchemaProps: spec.SchemaProps{
							Description: "The tier to assign to spaces created for users who registered for the event. This must be the valid name of an nstemplatetier resource.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"preferSameCluster": {
						SchemaProps: spec.SchemaProps{
							Description: "If true, best effort is made to provision all attendees of the event on the same cluster",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"verificationRequired": {
						SchemaProps: spec.SchemaProps{
							Description: "If true, the user will also be required to complete standard phone verification",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"startTime", "endTime", "maxAttendees", "userTier", "spaceTier"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_SocialEventStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SocialEventStatus defines the observed state of SocialEvent",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"type",
								},
								"x-kubernetes-list-type":       "map",
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Conditions is an array of current SocialEventStatus conditions Supported condition types: Ready",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.Condition"),
									},
								},
							},
						},
					},
					"activationCount": {
						SchemaProps: spec.SchemaProps{
							Default: 0,
							Type:    []string{"integer"},
							Format:  "int32",
						},
					},
				},
				Required: []string{"activationCount"},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.Condition"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_Space(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Space is the Schema for the spaces API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.SpaceSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.SpaceStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.SpaceSpec", "github.com/codeready-toolchain/api/api/v1alpha1.SpaceStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_SpaceBinding(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SpaceBinding is the Schema for the spacebindings API which defines relationship between Spaces and MasterUserRecords",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.SpaceBindingSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.SpaceBindingStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.SpaceBindingSpec", "github.com/codeready-toolchain/api/api/v1alpha1.SpaceBindingStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_SpaceBindingList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SpaceBindingList contains a list of SpaceBinding",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.SpaceBinding"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.SpaceBinding", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_SpaceBindingSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SpaceBindingSpec defines the desired state of SpaceBinding",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"masterUserRecord": {
						SchemaProps: spec.SchemaProps{
							Description: "The MasterUserRecord is a name of the MasterUserRecord this SpaceBinding belongs to.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"space": {
						SchemaProps: spec.SchemaProps{
							Description: "The Space is a name of the Space this SpaceBinding is bound to.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"spaceRole": {
						SchemaProps: spec.SchemaProps{
							Description: "The SpaceRole is a name of the SpaceRole that is granted to the user for the Space. For example: admin, view, ...",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"masterUserRecord", "space", "spaceRole"},
			},
		},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_SpaceBindingStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SpaceBindingStatus defines the observed state of SpaceBinding",
				Type:        []string{"object"},
			},
		},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_SpaceConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SpaceConfig allows to configure Space provisioning related functionality.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"spaceRequestEnabled": {
						SchemaProps: spec.SchemaProps{
							Description: "SpaceRequestEnabled specifies whether the SpaceRequest controller should start or not. This is specifically useful in order to enable/disable this functionality from configuration (e.g. disabled by default in Sandbox and enabled only for StoneSoup stage/prod ...).",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_SpaceRequest(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SpaceRequest is the Schema for the space request API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.SpaceRequestSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.SpaceRequestStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.SpaceRequestSpec", "github.com/codeready-toolchain/api/api/v1alpha1.SpaceRequestStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_SpaceRequestSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SpaceRequestSpec defines the desired state of Space",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"tierName": {
						SchemaProps: spec.SchemaProps{
							Description: "TierName is a required property introduced to retain the name of the tier for which this Space is provisioned.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"targetClusterRoles": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "TargetClusterRoles one or more label keys that define a set of clusters where the Space can be provisioned. The target cluster has to match ALL the roles defined in this field in order for the space to be provisioned there.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
				Required: []string{"tierName"},
			},
		},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_SpaceRequestStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SpaceRequestStatus defines the observed state of Space",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"targetClusterURL": {
						SchemaProps: spec.SchemaProps{
							Description: "TargetClusterURL The API URL of the cluster where Space is currently provisioned Can be empty if provisioning did not start or failed The URL is just for informative purposes for developers and controllers that are placed in member clusters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namespaceAccess": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "NamespaceAccess is the list with the provisioned namespace and secret to access it",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.NamespaceAccess"),
									},
								},
							},
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"type",
								},
								"x-kubernetes-list-type":       "map",
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Conditions is an array of SpaceRequest conditions Supported condition types: Provisioning, SpaceNotReady and Ready",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.Condition", "github.com/codeready-toolchain/api/api/v1alpha1.NamespaceAccess"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_SpaceSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SpaceSpec defines the desired state of Space",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"targetCluster": {
						SchemaProps: spec.SchemaProps{
							Description: "TargetCluster The cluster in which this Space is going to be provisioned If not set then the target cluster will be picked automatically",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"targetClusterRoles": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "TargetClusterRoles one or more label keys that define a set of clusters where the Space can be provisioned. The target cluster has to match ALL the roles defined in this field in order for the space to be provisioned there. It can be used as an alternative to targetCluster field, which has precedence in case both roles and name are provided.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"tierName": {
						SchemaProps: spec.SchemaProps{
							Description: "TierName is introduced to retain the name of the tier for which this Space is provisioned If not set then the tier name will be set automatically",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"parentSpace": {
						SchemaProps: spec.SchemaProps{
							Description: "ParentSpace holds the name of the context (Space) from which this space was created (requested), enabling hierarchy relationships between different Spaces.\n\nKeeping this association brings two main benefits: 1. SpaceBindings are inherited from the parent Space 2. Ability to easily monitor quota for the requested sub-spaces",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_SpaceStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SpaceStatus defines the observed state of Space",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"targetCluster": {
						SchemaProps: spec.SchemaProps{
							Description: "TargetCluster The cluster in which this Space is currently provisioned Can be empty if provisioning did not start or failed To be used to de-provision the NSTemplateSet if the Spec.TargetCluster is either changed or removed",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"provisionedNamespaces": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "ProvisionedNamespaces is a list of Namespaces that were provisioned for the Space.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.SpaceNamespace"),
									},
								},
							},
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"type",
								},
								"x-kubernetes-list-type":       "map",
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Conditions is an array of current Space conditions Supported condition types: ConditionReady",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.Condition", "github.com/codeready-toolchain/api/api/v1alpha1.SpaceNamespace"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_TierTemplateSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TierTemplateSpec defines the desired state of TierTemplate",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"tierName": {
						SchemaProps: spec.SchemaProps{
							Description: "The tier of the template. For example: \"basic\", \"advanced\", or \"team\"",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "The type of the template. For example: \"code\", \"dev\", \"stage\" or \"cluster\"",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"revision": {
						SchemaProps: spec.SchemaProps{
							Description: "The revision of the corresponding template",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"template": {
						SchemaProps: spec.SchemaProps{
							Description: "Template contains an OpenShift Template to be used to provision either a user's namespace or cluster-wide resources",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/openshift/api/template/v1.Template"),
						},
					},
				},
				Required: []string{"tierName", "type", "revision", "template"},
			},
		},
		Dependencies: []string{
			"github.com/openshift/api/template/v1.Template"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_TiersConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TiersConfig contains all configuration parameters related to tiers",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"defaultUserTier": {
						SchemaProps: spec.SchemaProps{
							Description: "DefaultUserTier specifies the default tier to assign for new users",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"defaultSpaceTier": {
						SchemaProps: spec.SchemaProps{
							Description: "DefaultSpaceTier specifies the default tier to assign for new spaces",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"durationBeforeChangeTierRequestDeletion": {
						SchemaProps: spec.SchemaProps{
							Description: "DurationBeforeChangeTierRequestDeletion specifies the duration before a ChangeTierRequest resource is deleted",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"templateUpdateRequestMaxPoolSize": {
						SchemaProps: spec.SchemaProps{
							Description: "TemplateUpdateRequestMaxPoolSize specifies the maximum number of concurrent TemplateUpdateRequests when updating MasterUserRecords",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_ToolchainCluster(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ToolchainCluster configures Toolchain to be aware of a Kubernetes cluster and encapsulates the details necessary to communicate with the cluster.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.ToolchainClusterSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.ToolchainClusterStatus"),
						},
					},
				},
				Required: []string{"spec"},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.ToolchainClusterSpec", "github.com/codeready-toolchain/api/api/v1alpha1.ToolchainClusterStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_ToolchainClusterCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ToolchainClusterCondition describes current state of a cluster.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of cluster condition, Ready or Offline.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the condition, one of True, False, Unknown.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastProbeTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time the condition was checked.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time the condition transit from one status to another.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "(brief) reason for the condition's last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "Human readable message indicating details about last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type", "status", "lastProbeTime"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_ToolchainClusterConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Defines all parameters concerned with the toolchaincluster resource",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"healthCheckPeriod": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines the period in between health checks",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"healthCheckTimeout": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines the timeout for each health check",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_ToolchainClusterSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ToolchainClusterSpec defines the desired state of ToolchainCluster",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"apiEndpoint": {
						SchemaProps: spec.SchemaProps{
							Description: "The API endpoint of the member cluster. This can be a hostname, hostname:port, IP or IP:port.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"caBundle": {
						SchemaProps: spec.SchemaProps{
							Description: "CABundle contains the certificate authority information.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the secret containing the token required to access the member cluster. The secret needs to exist in the same namespace as the control plane and should have a \"token\" key.",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.LocalSecretReference"),
						},
					},
					"disabledTLSValidations": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "set",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "DisabledTLSValidations defines a list of checks to ignore when validating the TLS connection to the member cluster.  This can be any of *, SubjectName, or ValidityPeriod. If * is specified, it is expected to be the only option in list.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
				Required: []string{"apiEndpoint", "secretRef"},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.LocalSecretReference"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_ToolchainClusterStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ToolchainClusterStatus contains information about the current status of a cluster updated periodically by cluster controller.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Conditions is an array of current cluster conditions.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.ToolchainClusterCondition"),
									},
								},
							},
						},
					},
				},
				Required: []string{"conditions"},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.ToolchainClusterCondition"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_ToolchainConfigSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ToolchainConfigSpec contains all configuration for host and member operators",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"host": {
						SchemaProps: spec.SchemaProps{
							Description: "Contains all host operator configuration",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.HostConfig"),
						},
					},
					"members": {
						SchemaProps: spec.SchemaProps{
							Description: "Contains all member operator configurations for all member clusters",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.Members"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.HostConfig", "github.com/codeready-toolchain/api/api/v1alpha1.Members"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_ToolchainConfigStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ToolchainConfigStatus defines the observed state of ToolchainConfig",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"syncErrors": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-map-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "SyncErrors is a map of sync errors indexed by toolchaincluster name that indicates whether an attempt to sync configuration to a member cluster failed",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"type",
								},
								"x-kubernetes-list-type":       "map",
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Conditions is an array of the current ToolchainConfig conditions Supported condition types: ConditionReady",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.Condition"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_ToolchainSecret(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ToolchainSecret defines a reference to a secret, this type should be included inline in any structs that contain secrets eg. NotificationSecret",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"ref": {
						SchemaProps: spec.SchemaProps{
							Description: "Reference is the name of the secret resource to look up",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_ToolchainStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ToolchainStatus is used to track overall toolchain status",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.ToolchainStatusSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.ToolchainStatusStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.ToolchainStatusSpec", "github.com/codeready-toolchain/api/api/v1alpha1.ToolchainStatusStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_ToolchainStatusConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ToolchainStatusConfig contains all configuration parameters related to the toolchain status component",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"toolchainStatusRefreshTime": {
						SchemaProps: spec.SchemaProps{
							Description: "ToolchainStatusRefreshTime specifies how often the ToolchainStatus should load and refresh the current hosted-toolchain status",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_ToolchainStatusSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ToolchainStatusSpec defines the desired state of ToolchainStatus",
				Type:        []string{"object"},
			},
		},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_ToolchainStatusStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ToolchainStatusStatus defines the observed state of the toolchain, including host cluster and member cluster components",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"hostOperator": {
						SchemaProps: spec.SchemaProps{
							Description: "HostOperator is the status of a toolchain host operator",
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.HostOperatorStatus"),
						},
					},
					"registrationService": {
						SchemaProps: spec.SchemaProps{
							Description: "RegistrationService is the status of the registration service",
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.HostRegistrationServiceStatus"),
						},
					},
					"members": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"clusterName",
								},
								"x-kubernetes-list-type":       "map",
								"x-kubernetes-patch-merge-key": "clusterName",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Members is an array of member status objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.Member"),
									},
								},
							},
						},
					},
					"metrics": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-map-type":       "atomic",
								"x-kubernetes-patch-strategy": "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Metrics is a map that stores metrics to be exposed on Prometheus.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type: []string{"object"},
										AdditionalProperties: &spec.SchemaOrBool{
											Allows: true,
											Schema: &spec.Schema{
												SchemaProps: spec.SchemaProps{
													Default: 0,
													Type:    []string{"integer"},
													Format:  "int32",
												},
											},
										},
									},
								},
							},
						},
					},
					"hostRoutes": {
						SchemaProps: spec.SchemaProps{
							Description: "HostRoutes/URLs of the host cluster, such as Proxy URL",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/codeready-toolchain/api/api/v1alpha1.HostRoutes"),
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"type",
								},
								"x-kubernetes-list-type":       "map",
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Conditions is an array of the current overall toolchain status conditions Supported condition types: ConditionReady",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.Condition", "github.com/codeready-toolchain/api/api/v1alpha1.HostOperatorStatus", "github.com/codeready-toolchain/api/api/v1alpha1.HostRegistrationServiceStatus", "github.com/codeready-toolchain/api/api/v1alpha1.HostRoutes", "github.com/codeready-toolchain/api/api/v1alpha1.Member"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_UserAccount(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "UserAccount keeps all information about user provisioned in the cluster",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.UserAccountSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.UserAccountStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.UserAccountSpec", "github.com/codeready-toolchain/api/api/v1alpha1.UserAccountStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_UserAccountSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "UserAccountSpec defines the desired state of UserAccount",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"userID": {
						SchemaProps: spec.SchemaProps{
							Description: "UserID is the user ID from RHD Identity Provider token (“sub” claim) Is to be used to create Identity and UserIdentityMapping resources",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"disabled": {
						SchemaProps: spec.SchemaProps{
							Description: "If set to true then the corresponding user should not be able to login \"false\" is assumed by default",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"originalSub": {
						SchemaProps: spec.SchemaProps{
							Description: "OriginalSub is an optional property temporarily introduced for the purpose of migrating the users to a new IdP provider client, and contains the user's \"original-sub\" claim",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"userID"},
			},
		},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_UserAccountStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "UserAccountStatus defines the observed state of UserAccount",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"type",
								},
								"x-kubernetes-list-type":       "map",
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Conditions is an array of current User Account conditions Supported condition types: ConditionReady",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.Condition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.Condition"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_UserSignup(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "UserSignup registers a user in the CodeReady Toolchain",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.UserSignupSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.UserSignupStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.UserSignupSpec", "github.com/codeready-toolchain/api/api/v1alpha1.UserSignupStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_UserSignupSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "UserSignupSpec defines the desired state of UserSignup",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"targetCluster": {
						SchemaProps: spec.SchemaProps{
							Description: "The cluster in which the user is provisioned in If not set then the target cluster will be picked automatically",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"userid": {
						SchemaProps: spec.SchemaProps{
							Description: "The user's user ID, obtained from the identity provider from the 'sub' (subject) claim",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"username": {
						SchemaProps: spec.SchemaProps{
							Description: "The user's username, obtained from the identity provider.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"givenName": {
						SchemaProps: spec.SchemaProps{
							Description: "The user's first name, obtained from the identity provider.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"familyName": {
						SchemaProps: spec.SchemaProps{
							Description: "The user's last name, obtained from the identity provider.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"company": {
						SchemaProps: spec.SchemaProps{
							Description: "The user's company name, obtained from the identity provider.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"states": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "States contains a number of values that reflect the desired state of the UserSignup.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"originalSub": {
						SchemaProps: spec.SchemaProps{
							Description: "OriginalSub is an optional property temporarily introduced for the purpose of migrating the users to a new IdP provider client, and contains the user's \"original-sub\" claim",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"userid", "username"},
			},
		},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_UserSignupStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "UserSignupStatus defines the observed state of UserSignup",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"type",
								},
								"x-kubernetes-list-type":       "map",
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Conditions is an array of current UserSignup conditions Supported condition types: PendingApproval, Provisioning, Complete",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.Condition"),
									},
								},
							},
						},
					},
					"compliantUsername": {
						SchemaProps: spec.SchemaProps{
							Description: "CompliantUsername is used to store the transformed, DNS-1123 compliant username",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.Condition"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_UserTier(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "UserTier contains user-specific configuration",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.UserTierSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.UserTierSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_UserTierSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "UserTierSpec defines the desired state of UserTier",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"deactivationTimeoutDays": {
						SchemaProps: spec.SchemaProps{
							Description: "the period (in days) after which users within the tier will be deactivated",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_UsersConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "UsersConfig contains all configuration parameters related to users",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"masterUserRecordUpdateFailureThreshold": {
						SchemaProps: spec.SchemaProps{
							Description: "MasterUserRecordUpdateFailureThreshold specifies the number of allowed failures before stopping attempts to update a MasterUserRecord",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"forbiddenUsernamePrefixes": {
						SchemaProps: spec.SchemaProps{
							Description: "ForbiddenUsernamePrefixes is a comma-separated string that defines the prefixes that a username may not have when signing up. If a username has a forbidden prefix, then the username compliance prefix is added to the username",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"forbiddenUsernameSuffixes": {
						SchemaProps: spec.SchemaProps{
							Description: "ForbiddenUsernameSuffixes is a comma-separated string that defines the suffixes that a username may not have when signing up.  If a username has a forbidden suffix, then the username compliance suffix is added to the username",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_WebhookConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Defines all parameters concerned with the Webhook",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"deploy": {
						SchemaProps: spec.SchemaProps{
							Description: "Defines the flag that determines whether to deploy the Webhook",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_Workspace(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Workspace is the Schema for the workspaces API but it is only for use by the Proxy. There will be no actual Workspace CRs in the host/member clusters. The CRD will be installed in member clusters for API discovery purposes only. The schema will be used by the proxy's workspace lister API.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.WorkspaceStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.WorkspaceStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_codeready_toolchain_api_api_v1alpha1_WorkspaceStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "WorkspaceStatus defines the observed state of a Workspace",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"namespaces": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "The list of namespaces belonging to the Workspace.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/codeready-toolchain/api/api/v1alpha1.SpaceNamespace"),
									},
								},
							},
						},
					},
					"owner": {
						SchemaProps: spec.SchemaProps{
							Description: "Owner the name of the UserSignup that owns the workspace. It’s the user who is being charged for the usage and whose quota is used for the workspace. There is only one user for this kind of relationship and it can be transferred to someone else during the lifetime of the workspace. By default, it’s the creator who becomes the owner as well.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"role": {
						SchemaProps: spec.SchemaProps{
							Description: "Role defines what kind of permissions the user has in the given workspace.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type defines the type of workspace. For example, \"home\" for a user's given workspace upon first signing up. It is currently valid for this value to be empty.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/codeready-toolchain/api/api/v1alpha1.SpaceNamespace"},
	}
}
